name: 🔄 CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  # 构建配置
  BUILD_TYPE: Release
  VCPKG_ROOT: ${{ github.workspace }}/vcpkg
  
  # Docker 配置
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # 代码质量检查
  code-quality:
    runs-on: ubuntu-latest
    steps:
    - name: 📥 检出代码
      uses: actions/checkout@v4
      
    - name: 🔍 C++ 代码格式检查
      run: |
        sudo apt-get update
        sudo apt-get install -y clang-format-14
        
        echo "检查 C++ 代码格式..."
        find include src -name "*.hpp" -o -name "*.cpp" | while read file; do
          if ! clang-format-14 --dry-run --Werror "$file" > /dev/null 2>&1; then
            echo "❌ 格式错误: $file"
            clang-format-14 --dry-run --Werror "$file" 2>&1 || true
            exit 1
          fi
        done
        echo "✅ C++ 代码格式检查通过"
        
    - name: 🔍 CMake 格式检查
      run: |
        sudo pip install cmake-format
        
        echo "检查 CMake 文件格式..."
        find . -name "CMakeLists.txt" -o -name "*.cmake" | while read file; do
          if ! cmake-format --check "$file" > /dev/null 2>&1; then
            echo "❌ CMake 格式错误: $file"
            exit 1
          fi
        done
        echo "✅ CMake 格式检查通过"

  # 构建和测试 (Linux)
  build-linux:
    runs-on: ubuntu-latest
    needs: code-quality
    strategy:
      matrix:
        compiler: [gcc-11, clang-14]
        build_type: [Debug, Release]
    
    steps:
    - name: 📥 检出代码
      uses: actions/checkout@v4
      with:
        submodules: recursive

    - name: 🔧 安装构建依赖
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          build-essential \
          cmake \
          ninja-build \
          pkg-config \
          curl \
          zip \
          unzip \
          tar \
          git
          
        # 安装特定编译器
        if [[ "${{ matrix.compiler }}" == "gcc-11" ]]; then
          sudo apt-get install -y gcc-11 g++-11
          echo "CC=gcc-11" >> $GITHUB_ENV
          echo "CXX=g++-11" >> $GITHUB_ENV
        elif [[ "${{ matrix.compiler }}" == "clang-14" ]]; then
          sudo apt-get install -y clang-14
          echo "CC=clang-14" >> $GITHUB_ENV
          echo "CXX=clang++-14" >> $GITHUB_ENV
        fi

    - name: 📦 缓存 vcpkg
      uses: actions/cache@v3
      with:
        path: |
          ${{ env.VCPKG_ROOT }}
          !${{ env.VCPKG_ROOT }}/buildtrees
          !${{ env.VCPKG_ROOT }}/packages
          !${{ env.VCPKG_ROOT }}/downloads
        key: vcpkg-${{ runner.os }}-${{ hashFiles('vcpkg.json') }}
        restore-keys: |
          vcpkg-${{ runner.os }}-

    - name: 🛠️ 安装 vcpkg
      run: |
        if [ ! -d "$VCPKG_ROOT" ]; then
          git clone https://github.com/Microsoft/vcpkg.git $VCPKG_ROOT
        fi
        cd $VCPKG_ROOT
        ./bootstrap-vcpkg.sh
        ./vcpkg integrate install

    - name: 🏗️ 配置构建
      run: |
        cmake -B build \
          -DCMAKE_BUILD_TYPE=${{ matrix.build_type }} \
          -DCMAKE_TOOLCHAIN_FILE=$VCPKG_ROOT/scripts/buildsystems/vcpkg.cmake \
          -DSHIELD_BUILD_TESTS=ON \
          -DSHIELD_BUILD_EXAMPLES=ON \
          -G Ninja

    - name: 🔨 编译项目
      run: |
        cmake --build build --config ${{ matrix.build_type }} --parallel $(nproc)

    - name: 🧪 运行测试
      run: |
        cd build
        ctest --output-on-failure --parallel $(nproc)

    - name: 📊 测试覆盖率 (仅 Debug + GCC)
      if: matrix.build_type == 'Debug' && matrix.compiler == 'gcc-11'
      run: |
        sudo apt-get install -y gcovr
        gcovr --root . --exclude-directories build/vcpkg_installed --xml-pretty --xml coverage.xml
        
    - name: 📤 上传覆盖率报告
      if: matrix.build_type == 'Debug' && matrix.compiler == 'gcc-11'
      uses: codecov/codecov-action@v3
      with:
        files: coverage.xml
        fail_ci_if_error: false

  # 构建和测试 (macOS)
  build-macos:
    runs-on: macos-latest
    needs: code-quality
    
    steps:
    - name: 📥 检出代码
      uses: actions/checkout@v4
      with:
        submodules: recursive

    - name: 🔧 安装构建依赖
      run: |
        brew install cmake ninja pkg-config

    - name: 📦 缓存 vcpkg
      uses: actions/cache@v3
      with:
        path: |
          ${{ env.VCPKG_ROOT }}
          !${{ env.VCPKG_ROOT }}/buildtrees
          !${{ env.VCPKG_ROOT }}/packages
          !${{ env.VCPKG_ROOT }}/downloads
        key: vcpkg-macos-${{ hashFiles('vcpkg.json') }}

    - name: 🛠️ 安装 vcpkg
      run: |
        git clone https://github.com/Microsoft/vcpkg.git $VCPKG_ROOT
        cd $VCPKG_ROOT
        ./bootstrap-vcpkg.sh

    - name: 🏗️ 配置和编译
      run: |
        cmake -B build \
          -DCMAKE_BUILD_TYPE=Release \
          -DCMAKE_TOOLCHAIN_FILE=$VCPKG_ROOT/scripts/buildsystems/vcpkg.cmake \
          -DSHIELD_BUILD_TESTS=ON \
          -G Ninja
        cmake --build build --parallel $(sysctl -n hw.logicalcpu)

    - name: 🧪 运行测试
      run: |
        cd build
        ctest --output-on-failure --parallel $(sysctl -n hw.logicalcpu)

  # Docker 镜像构建
  build-docker:
    runs-on: ubuntu-latest
    needs: [build-linux]
    if: github.event_name == 'push'
    
    steps:
    - name: 📥 检出代码
      uses: actions/checkout@v4

    - name: 🔧 设置 Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: 🔑 登录容器注册表
      if: github.event_name != 'pull_request'
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: 📊 提取元数据
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha
          type=raw,value=latest,enable={{is_default_branch}}

    - name: 🏗️ 构建和推送 Docker 镜像
      uses: docker/build-push-action@v5
      with:
        context: .
        platforms: linux/amd64,linux/arm64
        push: ${{ github.event_name != 'pull_request' }}
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        build-args: |
          BUILD_TYPE=Release
          ENABLE_OPTIMIZATIONS=ON

  # 安全扫描
  security-scan:
    runs-on: ubuntu-latest
    needs: [build-docker]
    if: github.event_name == 'push'
    
    steps:
    - name: 📥 检出代码
      uses: actions/checkout@v4

    - name: 🔍 代码安全扫描
      uses: github/codeql-action/init@v3
      with:
        languages: cpp

    - name: 🏗️ 构建项目 (CodeQL)
      run: |
        sudo apt-get update
        sudo apt-get install -y build-essential cmake ninja-build
        
        git clone https://github.com/Microsoft/vcpkg.git vcpkg
        cd vcpkg && ./bootstrap-vcpkg.sh && cd ..
        
        cmake -B build \
          -DCMAKE_BUILD_TYPE=Release \
          -DCMAKE_TOOLCHAIN_FILE=vcpkg/scripts/buildsystems/vcpkg.cmake \
          -G Ninja
        cmake --build build --parallel 2

    - name: 🔍 执行 CodeQL 分析
      uses: github/codeql-action/analyze@v3

    - name: 🐳 Docker 镜像安全扫描
      if: github.event_name == 'push'
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}
        format: 'sarif'
        output: 'trivy-results.sarif'

    - name: 📤 上传安全扫描结果
      if: github.event_name == 'push'
      uses: github/codeql-action/upload-sarif@v3
      with:
        sarif_file: 'trivy-results.sarif'

  # 性能基准测试
  benchmark:
    runs-on: ubuntu-latest
    needs: [build-linux]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
    - name: 📥 检出代码
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # 需要历史记录来比较性能

    - name: 🔧 安装依赖
      run: |
        sudo apt-get update
        sudo apt-get install -y build-essential cmake ninja-build

    - name: 🏗️ 构建基准测试
      run: |
        git clone https://github.com/Microsoft/vcpkg.git vcpkg
        cd vcpkg && ./bootstrap-vcpkg.sh && cd ..
        
        cmake -B build \
          -DCMAKE_BUILD_TYPE=Release \
          -DCMAKE_TOOLCHAIN_FILE=vcpkg/scripts/buildsystems/vcpkg.cmake \
          -DSHIELD_BUILD_BENCHMARKS=ON \
          -G Ninja
        cmake --build build --target benchmarks --parallel $(nproc)

    - name: 🏃 运行基准测试
      run: |
        cd build
        ./benchmarks/shield_benchmarks --benchmark_format=json > benchmark_results.json

    - name: 📊 上传基准测试结果
      uses: benchmark-action/github-action-benchmark@v1
      with:
        tool: 'googlecpp'
        output-file-path: build/benchmark_results.json
        github-token: ${{ secrets.GITHUB_TOKEN }}
        auto-push: true
        comment-on-alert: true
        alert-threshold: '200%'
        fail-on-alert: false