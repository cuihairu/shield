name: 🚀 发布版本

on:
  push:
    tags:
      - 'v*.*.*'

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # 创建 GitHub Release
  create-release:
    runs-on: ubuntu-latest
    outputs:
      upload_url: ${{ steps.create_release.outputs.upload_url }}
      tag_name: ${{ steps.get_version.outputs.tag_name }}
    steps:
    - name: 📥 检出代码
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: 🏷️ 获取版本信息
      id: get_version
      run: |
        TAG=${GITHUB_REF#refs/tags/}
        echo "tag_name=$TAG" >> $GITHUB_OUTPUT
        echo "version=${TAG#v}" >> $GITHUB_OUTPUT

    - name: 📝 生成更新日志
      id: changelog
      run: |
        # 获取上一个标签
        PREV_TAG=$(git describe --tags --abbrev=0 HEAD^ 2>/dev/null || echo "")
        
        if [ -n "$PREV_TAG" ]; then
          echo "## 🎉 更新内容" > changelog.md
          echo "" >> changelog.md
          
          # 获取提交记录并按类型分类
          git log --pretty=format:"%s" ${PREV_TAG}..HEAD | while read line; do
            if [[ $line =~ ^feat(\(.+\))?!?: ]]; then
              echo "### ✨ 新功能" >> changelog.md
              echo "- ${line#*: }" >> changelog.md
            elif [[ $line =~ ^fix(\(.+\))?!?: ]]; then
              echo "### 🐛 Bug 修复" >> changelog.md
              echo "- ${line#*: }" >> changelog.md
            elif [[ $line =~ ^docs(\(.+\))?!?: ]]; then
              echo "### 📚 文档" >> changelog.md
              echo "- ${line#*: }" >> changelog.md
            elif [[ $line =~ ^perf(\(.+\))?!?: ]]; then
              echo "### ⚡ 性能优化" >> changelog.md
              echo "- ${line#*: }" >> changelog.md
            fi
          done
        else
          echo "## 🎉 首次发布" > changelog.md
          echo "" >> changelog.md
          echo "这是 Shield 游戏服务器框架的首个正式版本。" >> changelog.md
        fi
        
        # 输出到 GitHub Actions
        {
          echo 'changelog<<EOF'
          cat changelog.md
          echo 'EOF'
        } >> $GITHUB_OUTPUT

    - name: 🎯 创建 Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ steps.get_version.outputs.tag_name }}
        release_name: Shield ${{ steps.get_version.outputs.tag_name }}
        body: ${{ steps.changelog.outputs.changelog }}
        draft: false
        prerelease: ${{ contains(steps.get_version.outputs.tag_name, '-') }}

  # 构建发布版本
  build-release:
    runs-on: ${{ matrix.os }}
    needs: create-release
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            arch: x64
            target: linux-x64
          - os: macos-latest
            arch: x64
            target: macos-x64
          - os: windows-latest
            arch: x64
            target: windows-x64
    
    steps:
    - name: 📥 检出代码
      uses: actions/checkout@v4
      with:
        submodules: recursive

    - name: 🔧 安装构建依赖 (Linux)
      if: matrix.os == 'ubuntu-latest'
      run: |
        sudo apt-get update
        sudo apt-get install -y build-essential cmake ninja-build

    - name: 🔧 安装构建依赖 (macOS)
      if: matrix.os == 'macos-latest'
      run: |
        brew install cmake ninja

    - name: 🔧 安装构建依赖 (Windows)
      if: matrix.os == 'windows-latest'
      run: |
        choco install cmake ninja

    - name: 🛠️ 设置 vcpkg
      run: |
        git clone https://github.com/Microsoft/vcpkg.git vcpkg
        if [ "$RUNNER_OS" == "Windows" ]; then
          ./vcpkg/bootstrap-vcpkg.bat
        else
          ./vcpkg/bootstrap-vcpkg.sh
        fi
      shell: bash

    - name: 🏗️ 构建发布版本
      run: |
        if [ "$RUNNER_OS" == "Windows" ]; then
          TOOLCHAIN_FILE="vcpkg/scripts/buildsystems/vcpkg.cmake"
        else
          TOOLCHAIN_FILE="vcpkg/scripts/buildsystems/vcpkg.cmake"
        fi
        
        cmake -B build \
          -DCMAKE_BUILD_TYPE=Release \
          -DCMAKE_TOOLCHAIN_FILE=$TOOLCHAIN_FILE \
          -DSHIELD_BUILD_EXAMPLES=ON \
          -G Ninja
        
        cmake --build build --config Release --parallel
      shell: bash

    - name: 📦 打包发布文件
      run: |
        mkdir -p release/shield-${{ needs.create-release.outputs.tag_name }}-${{ matrix.target }}
        
        # 复制二进制文件
        if [ "$RUNNER_OS" == "Windows" ]; then
          cp build/bin/shield.exe release/shield-${{ needs.create-release.outputs.tag_name }}-${{ matrix.target }}/
          cp build/bin/*.dll release/shield-${{ needs.create-release.outputs.tag_name }}-${{ matrix.target }}/ 2>/dev/null || true
        else
          cp build/bin/shield release/shield-${{ needs.create-release.outputs.tag_name }}-${{ matrix.target }}/
        fi
        
        # 复制配置文件和脚本
        cp -r config release/shield-${{ needs.create-release.outputs.tag_name }}-${{ matrix.target }}/
        cp -r scripts release/shield-${{ needs.create-release.outputs.tag_name }}-${{ matrix.target }}/
        
        # 复制文档
        cp README.md release/shield-${{ needs.create-release.outputs.tag_name }}-${{ matrix.target }}/
        cp LICENSE release/shield-${{ needs.create-release.outputs.tag_name }}-${{ matrix.target }}/
        
        # 创建压缩包
        cd release
        if [ "$RUNNER_OS" == "Windows" ]; then
          7z a shield-${{ needs.create-release.outputs.tag_name }}-${{ matrix.target }}.zip shield-${{ needs.create-release.outputs.tag_name }}-${{ matrix.target }}/*
        else
          tar -czf shield-${{ needs.create-release.outputs.tag_name }}-${{ matrix.target }}.tar.gz shield-${{ needs.create-release.outputs.tag_name }}-${{ matrix.target }}
        fi
      shell: bash

    - name: 📤 上传发布文件
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ needs.create-release.outputs.upload_url }}
        asset_path: ${{ runner.os == 'Windows' && format('release/shield-{0}-{1}.zip', needs.create-release.outputs.tag_name, matrix.target) || format('release/shield-{0}-{1}.tar.gz', needs.create-release.outputs.tag_name, matrix.target) }}
        asset_name: ${{ runner.os == 'Windows' && format('shield-{0}-{1}.zip', needs.create-release.outputs.tag_name, matrix.target) || format('shield-{0}-{1}.tar.gz', needs.create-release.outputs.tag_name, matrix.target) }}
        asset_content_type: ${{ runner.os == 'Windows' && 'application/zip' || 'application/gzip' }}

  # 构建和推送 Docker 镜像
  build-docker-release:
    runs-on: ubuntu-latest
    needs: create-release
    steps:
    - name: 📥 检出代码
      uses: actions/checkout@v4

    - name: 🔧 设置 Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: 🔑 登录容器注册表
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: 📊 提取元数据
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=semver,pattern={{major}}
          type=raw,value=latest

    - name: 🏗️ 构建和推送 Docker 镜像
      uses: docker/build-push-action@v5
      with:
        context: .
        platforms: linux/amd64,linux/arm64
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        build-args: |
          BUILD_TYPE=Release
          VERSION=${{ needs.create-release.outputs.tag_name }}

  # 部署文档
  deploy-docs:
    runs-on: ubuntu-latest
    needs: create-release
    permissions:
      contents: read
      pages: write
      id-token: write
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    
    steps:
    - name: 📥 检出代码
      uses: actions/checkout@v4

    - name: 💾 安装 mdBook
      run: |
        curl --proto '=https' --tlsv1.2 https://sh.rustup.rs -sSf -y | sh
        rustup update
        cargo install mdbook

    - name: 🔧 配置 GitHub Pages
      id: pages
      uses: actions/configure-pages@v4

    - name: 📖 构建文档
      run: |
        # 更新版本信息
        sed -i 's/version = ".*"/version = "${{ needs.create-release.outputs.tag_name }}"/' book.toml
        mdbook build

    - name: 📤 上传文档
      uses: actions/upload-pages-artifact@v3
      with:
        path: ./book

    - name: 🚀 部署到 GitHub Pages
      id: deployment
      uses: actions/deploy-pages@v4

  # 发布通知
  notify:
    runs-on: ubuntu-latest
    needs: [create-release, build-release, build-docker-release, deploy-docs]
    if: always()
    steps:
    - name: 📢 发布成功通知
      if: needs.create-release.result == 'success' && needs.build-release.result == 'success'
      run: |
        echo "🎉 Shield ${{ needs.create-release.outputs.tag_name }} 发布成功！"
        echo "📦 二进制文件已上传到 GitHub Releases"
        echo "🐳 Docker 镜像已推送到 ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}"
        echo "📚 文档已部署到 GitHub Pages"

    - name: ❌ 发布失败通知
      if: needs.create-release.result == 'failure' || needs.build-release.result == 'failure'
      run: |
        echo "❌ Shield ${{ needs.create-release.outputs.tag_name }} 发布失败！"
        echo "请检查构建日志和错误信息。"
        exit 1