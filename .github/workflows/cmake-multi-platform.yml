# This starter workflow is for a CMake project running on multiple platforms. There is a different starter workflow if you just want a single platform.
# See: https://github.com/actions/starter-workflows/blob/main/ci/cmake-single-platform.yml
name: CMake on multiple platforms

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build:
    runs-on: ${{ matrix.os }}

    strategy:
      # Set fail-fast to false to ensure that feedback is delivered for all matrix combinations. Consider changing this to true when your workflow is stable.
      fail-fast: false

      # Set up a matrix to run the following configurations:
      # 1. <Windows, Release, latest MSVC compiler toolchain on the default runner image, default generator>
      # 2. <Linux, Release, latest GCC compiler toolchain on the default runner image, default generator>
      # 3. <Linux, Release, latest Clang compiler toolchain on the default runner image, default generator>
      # 4. <macOS, Release, latest Clang compiler toolchain on the default runner image, default generator>
      #
      # To add more build types (Release, Debug, RelWithDebInfo, etc.) customize the build_type list.
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        build_type: [Release]
        c_compiler: [gcc, clang, cl]
        include:
          - os: windows-latest
            c_compiler: cl
            cpp_compiler: cl
          - os: ubuntu-latest
            c_compiler: gcc
            cpp_compiler: g++
          - os: ubuntu-latest
            c_compiler: clang
            cpp_compiler: clang++
          - os: macos-latest
            c_compiler: clang
            cpp_compiler: clang++
        exclude:
          - os: windows-latest
            c_compiler: gcc
          - os: windows-latest
            c_compiler: clang
          - os: ubuntu-latest
            c_compiler: cl
          - os: macos-latest
            c_compiler: gcc
          - os: macos-latest
            c_compiler: cl

    steps:
      - uses: actions/checkout@v4

      - name: Install CMake 3.30+
        uses: jwlawson/actions-setup-cmake@v2
        with:
          cmake-version: '3.30.0'

      - name: Verify CMake version
        run: cmake --version

      - name: Prepare Linux build
        if: runner.os == 'Linux'
        shell: bash
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential curl zip unzip tar pkg-config

      - name: Prepare macOS build
        if: runner.os == 'macOS'
        shell: bash
        run: |
          # Install necessary build tools if needed
          echo "Setting up macOS build environment..."

      - name: Prepare Windows build
        if: runner.os == 'Windows'
        shell: pwsh
        run: |
          echo "Configuring for Visual Studio..."
          echo "VS_GENERATOR=Visual Studio 17 2022" >> $env:GITHUB_ENV
          echo "VS_PLATFORM=x64" >> $env:GITHUB_ENV

      - name: run-vcpkg
        uses: lukka/run-vcpkg@v11.5

      - name: Set reusable strings
        # Turn repeated input strings (such as the build output directory) into step outputs. These step outputs can be used throughout the workflow file.
        id: strings
        shell: bash
        run: |
          echo "build-output-dir=${{ github.workspace }}/build" >> "$GITHUB_OUTPUT"

      - name: Configure CMake
        # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
        # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
        shell: bash # Keep bash for cross-platform logic
        run: |
          echo "VCPKG_ROOT: ${VCPKG_ROOT}"
          echo "Toolchain file: ${VCPKG_ROOT}/scripts/buildsystems/vcpkg.cmake"
          echo "Build dir: ${{ steps.strings.outputs.build-output-dir }}"
          
          if [ "$RUNNER_OS" = "Windows" ]; then
              echo "Using Visual Studio generator: ${VS_GENERATOR}"
              # Use pwsh for the actual cmake command on Windows to ensure path handling
              pwsh -Command "cmake -B '${{ steps.strings.outputs.build-output-dir }}' `
              -G '${{ env.VS_GENERATOR }}' -A '${{ env.VS_PLATFORM }}' `
              -DCMAKE_TOOLCHAIN_FILE='${{ env.VCPKG_ROOT }}/scripts/buildsystems/vcpkg.cmake' `
              -DCMAKE_BUILD_TYPE='${{ matrix.build_type }}' `
              -S '${{ github.workspace }}'"
          else
              cmake -B ${{ steps.strings.outputs.build-output-dir }} \
              -DCMAKE_TOOLCHAIN_FILE=${VCPKG_ROOT}/scripts/buildsystems/vcpkg.cmake \
              -DCMAKE_CXX_COMPILER=${{ matrix.cpp_compiler }} \
              -DCMAKE_C_COMPILER=${{ matrix.c_compiler }} \
              -DCMAKE_BUILD_TYPE=${{ matrix.build_type }} \
              -S ${{ github.workspace }}
          fi

      - name: Build
        # Build your program with the given configuration. Note that --config is needed because the default Windows generator is a multi-config generator (Visual Studio generator).
        run: cmake --build ${{ steps.strings.outputs.build-output-dir }} --config ${{ matrix.build_type }}

      - name: Test
        working-directory: ${{ steps.strings.outputs.build-output-dir }}
        # Execute tests defined by the CMake configuration. Note that --build-config is needed because the default Windows generator is a multi-config generator (Visual Studio generator).
        # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
        run: ctest --build-config ${{ matrix.build_type }}

      - name: Cache vcpkg
        uses: actions/cache@v4
        with:
          path: ${{ github.workspace }}/vcpkg
          key: ${{ runner.os }}-vcpkg-${{ hashFiles('**/vcpkg.json') }}
          restore-keys: |
            ${{ runner.os }}-vcpkg-